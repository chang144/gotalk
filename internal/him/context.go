package him

import (
	"github.com/chang144/gotalk/internal/him/wire"
	"github.com/chang144/gotalk/internal/him/wire/pkt"
	"github.com/klintcheng/kim/logger"
	"google.golang.org/protobuf/proto"
	"sync"
)

// Context 实现处理器中的上下文
type Context interface {
	Dispatcher
	SessionStorage
	Header() *pkt.Header
	ReadBody(val proto.Message) error
	Session() Session
	RespWithError(status pkt.Status, err error) error
	Resp(status pkt.Status, body proto.Message) error
	Dispatch(body proto.Message, revs ...*Location) error
	Next()
}

// HandlerFunc defines the handler used
// 处理器
type HandlerFunc func(ctx Context)

// HandlersChain 处理链
type HandlersChain []HandlerFunc

// ContextImpl is the most important part of him
type ContextImpl struct {
	sync.Mutex
	Dispatcher
	SessionStorage

	handlers   HandlersChain
	index      int
	requestPkt *pkt.LogicPkt
	session    Session
}

func BuildContext() Context {
	return &ContextImpl{}
}

func (c *ContextImpl) Header() *pkt.Header {
	return &c.requestPkt.Header
}

func (c *ContextImpl) ReadBody(val proto.Message) error {
	return c.requestPkt.ReadBody(val)
}

func (c *ContextImpl) Session() Session {
	if c.session == nil {
		s, _ := c.requestPkt.GetMeta(wire.MetaDestServer)
		c.session = &pkt.Session{
			ChannelId: c.requestPkt.ChannelId,
			GateId:    s.(string),
			Tags:      []string{"AutoGenerated"},
		}
	}
	return c.session
}

func (c *ContextImpl) RespWithError(status pkt.Status, err error) error {
	return c.Resp(status, &pkt.ErrorResp{Message: err.Error()})
}

// Resp 回复消息，也就是给发送方返回一条消息
func (c *ContextImpl) Resp(status pkt.Status, body proto.Message) error {
	logicPkt := pkt.NewLogicPkt(&c.requestPkt.Header)
	logicPkt.Status = status
	logicPkt.WriteBody(body)
	logicPkt.Flag = pkt.Flag_Response

	err := c.Push(c.Session().GetGateId(), []string{c.Session().GetChannelId()}, logicPkt)
	if err != nil {
		return err
	}

	return nil
}

// Next 执行责任链
func (c *ContextImpl) Next() {
	if c.index >= len(c.handlers) {
		return
	}
	f := c.handlers[c.index]
	c.index++
	if f == nil {
		logger.Warn("arrived unknown HandlerFunc")
		return
	}
	f(c)
}

// Dispatch 派发消息到指定的接收方
func (c *ContextImpl) Dispatch(body proto.Message, recs ...*Location) error {
	if len(recs) == 0 {
		return nil
	}

	logicPkt := pkt.NewLogicPkt(&c.requestPkt.Header)
	logicPkt.Flag = pkt.Flag_Push
	logicPkt.WriteBody(body)

	group := make(map[string][]string)
	for _, recv := range recs {
		if recv.ChannelId == c.session.GetChannelId() {
			continue
		}
		if _, ok := group[recv.GateId]; !ok {
			group[recv.GateId] = make([]string, 0)
		}
		group[recv.GateId] = append(group[recv.GateId], recv.ChannelId)
	}

	for gateway, ids := range group {
		err := c.Push(gateway, ids, logicPkt)
		if err != nil {
			logger.Error(err)
		}
		return err
	}

	return nil
}

func (c *ContextImpl) reset() {
	c.requestPkt = nil
	c.index = 0
	c.handlers = nil
	c.session = nil
}

var _ Context = (*ContextImpl)(nil)
