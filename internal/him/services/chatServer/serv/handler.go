package serv

import (
	"bytes"
	"github.com/chang144/gotalk/internal/him"
	"github.com/chang144/gotalk/internal/him/container"
	"github.com/chang144/gotalk/internal/him/wire"
	"github.com/chang144/gotalk/internal/him/wire/pkt"
	"strings"
	"time"
)

type ChatHandler struct {
}

// Receive 回调到业务层
func (c *ChatHandler) Receive(agent him.Agent, payload []byte) {
	buf := bytes.NewBuffer(payload)
	logicPkt, err := pkt.MustReadLogicPkt(buf)
	if err != nil {
		return
	}
	var session *pkt.Session
	if logicPkt.Command == wire.CommandLoginSignIn {
		server, _ := logicPkt.GetMeta(wire.MetaDestServer)
		session = &pkt.Session{
			ChannelId: logicPkt.ChannelId,
			GateId:    server.(string),
			Tags:      []string{"AutoGenerated"},
		}
	} else {
		// TODO: 优化点

	}

}

func (c *ChatHandler) Accept(conn him.Conn, timeout time.Duration) (string, error) {
	//TODO implement me
	panic("implement me")
}

func (c *ChatHandler) Disconnect(id string) error {
	//TODO implement me
	panic("implement me")
}

var _ him.Handler = (*ChatHandler)(nil)

type ChatServerDispatcher struct {
}

func (c *ChatServerDispatcher) Push(gateway string, channels []string, p *pkt.LogicPkt) error {
	p.AddStringMeta(wire.MetaDestChannels, strings.Join(channels, ","))
	return container.Push(gateway, p)
}

var _ him.Dispatcher = (*ChatServerDispatcher)(nil)
